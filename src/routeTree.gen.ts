/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkflowRegistryIndexRouteImport } from './routes/workflow-registry/index'
import { Route as WorkerConfigsIndexRouteImport } from './routes/worker-configs/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as TargetAccountsIndexRouteImport } from './routes/target-accounts/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectTypesIndexRouteImport } from './routes/project-types/index'
import { Route as PlatformAccountsIndexRouteImport } from './routes/platform-accounts/index'
import { Route as ParseJsonIndexRouteImport } from './routes/parse-json/index'
import { Route as MonitoringTasksIndexRouteImport } from './routes/monitoring-tasks/index'
import { Route as InspirationsIndexRouteImport } from './routes/inspirations/index'
import { Route as DouyinDownloaderIndexRouteImport } from './routes/douyin-downloader/index'
import { Route as AssetsIndexRouteImport } from './routes/assets/index'
import { Route as TargetAccountsAccountIdRouteImport } from './routes/target-accounts/$accountId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowRegistryIndexRoute = WorkflowRegistryIndexRouteImport.update({
  id: '/workflow-registry/',
  path: '/workflow-registry/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkerConfigsIndexRoute = WorkerConfigsIndexRouteImport.update({
  id: '/worker-configs/',
  path: '/worker-configs/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const TargetAccountsIndexRoute = TargetAccountsIndexRouteImport.update({
  id: '/target-accounts/',
  path: '/target-accounts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectTypesIndexRoute = ProjectTypesIndexRouteImport.update({
  id: '/project-types/',
  path: '/project-types/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlatformAccountsIndexRoute = PlatformAccountsIndexRouteImport.update({
  id: '/platform-accounts/',
  path: '/platform-accounts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ParseJsonIndexRoute = ParseJsonIndexRouteImport.update({
  id: '/parse-json/',
  path: '/parse-json/',
  getParentRoute: () => rootRouteImport,
} as any)
const MonitoringTasksIndexRoute = MonitoringTasksIndexRouteImport.update({
  id: '/monitoring-tasks/',
  path: '/monitoring-tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const InspirationsIndexRoute = InspirationsIndexRouteImport.update({
  id: '/inspirations/',
  path: '/inspirations/',
  getParentRoute: () => rootRouteImport,
} as any)
const DouyinDownloaderIndexRoute = DouyinDownloaderIndexRouteImport.update({
  id: '/douyin-downloader/',
  path: '/douyin-downloader/',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsIndexRoute = AssetsIndexRouteImport.update({
  id: '/assets/',
  path: '/assets/',
  getParentRoute: () => rootRouteImport,
} as any)
const TargetAccountsAccountIdRoute = TargetAccountsAccountIdRouteImport.update({
  id: '/target-accounts/$accountId',
  path: '/target-accounts/$accountId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/target-accounts/$accountId': typeof TargetAccountsAccountIdRoute
  '/assets': typeof AssetsIndexRoute
  '/douyin-downloader': typeof DouyinDownloaderIndexRoute
  '/inspirations': typeof InspirationsIndexRoute
  '/monitoring-tasks': typeof MonitoringTasksIndexRoute
  '/parse-json': typeof ParseJsonIndexRoute
  '/platform-accounts': typeof PlatformAccountsIndexRoute
  '/project-types': typeof ProjectTypesIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/target-accounts': typeof TargetAccountsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/worker-configs': typeof WorkerConfigsIndexRoute
  '/workflow-registry': typeof WorkflowRegistryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/target-accounts/$accountId': typeof TargetAccountsAccountIdRoute
  '/assets': typeof AssetsIndexRoute
  '/douyin-downloader': typeof DouyinDownloaderIndexRoute
  '/inspirations': typeof InspirationsIndexRoute
  '/monitoring-tasks': typeof MonitoringTasksIndexRoute
  '/parse-json': typeof ParseJsonIndexRoute
  '/platform-accounts': typeof PlatformAccountsIndexRoute
  '/project-types': typeof ProjectTypesIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/target-accounts': typeof TargetAccountsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/worker-configs': typeof WorkerConfigsIndexRoute
  '/workflow-registry': typeof WorkflowRegistryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/target-accounts/$accountId': typeof TargetAccountsAccountIdRoute
  '/assets/': typeof AssetsIndexRoute
  '/douyin-downloader/': typeof DouyinDownloaderIndexRoute
  '/inspirations/': typeof InspirationsIndexRoute
  '/monitoring-tasks/': typeof MonitoringTasksIndexRoute
  '/parse-json/': typeof ParseJsonIndexRoute
  '/platform-accounts/': typeof PlatformAccountsIndexRoute
  '/project-types/': typeof ProjectTypesIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/target-accounts/': typeof TargetAccountsIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/worker-configs/': typeof WorkerConfigsIndexRoute
  '/workflow-registry/': typeof WorkflowRegistryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/target-accounts/$accountId'
    | '/assets'
    | '/douyin-downloader'
    | '/inspirations'
    | '/monitoring-tasks'
    | '/parse-json'
    | '/platform-accounts'
    | '/project-types'
    | '/projects'
    | '/target-accounts'
    | '/tasks'
    | '/worker-configs'
    | '/workflow-registry'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/target-accounts/$accountId'
    | '/assets'
    | '/douyin-downloader'
    | '/inspirations'
    | '/monitoring-tasks'
    | '/parse-json'
    | '/platform-accounts'
    | '/project-types'
    | '/projects'
    | '/target-accounts'
    | '/tasks'
    | '/worker-configs'
    | '/workflow-registry'
  id:
    | '__root__'
    | '/'
    | '/target-accounts/$accountId'
    | '/assets/'
    | '/douyin-downloader/'
    | '/inspirations/'
    | '/monitoring-tasks/'
    | '/parse-json/'
    | '/platform-accounts/'
    | '/project-types/'
    | '/projects/'
    | '/target-accounts/'
    | '/tasks/'
    | '/worker-configs/'
    | '/workflow-registry/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TargetAccountsAccountIdRoute: typeof TargetAccountsAccountIdRoute
  AssetsIndexRoute: typeof AssetsIndexRoute
  DouyinDownloaderIndexRoute: typeof DouyinDownloaderIndexRoute
  InspirationsIndexRoute: typeof InspirationsIndexRoute
  MonitoringTasksIndexRoute: typeof MonitoringTasksIndexRoute
  ParseJsonIndexRoute: typeof ParseJsonIndexRoute
  PlatformAccountsIndexRoute: typeof PlatformAccountsIndexRoute
  ProjectTypesIndexRoute: typeof ProjectTypesIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  TargetAccountsIndexRoute: typeof TargetAccountsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  WorkerConfigsIndexRoute: typeof WorkerConfigsIndexRoute
  WorkflowRegistryIndexRoute: typeof WorkflowRegistryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflow-registry/': {
      id: '/workflow-registry/'
      path: '/workflow-registry'
      fullPath: '/workflow-registry'
      preLoaderRoute: typeof WorkflowRegistryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/worker-configs/': {
      id: '/worker-configs/'
      path: '/worker-configs'
      fullPath: '/worker-configs'
      preLoaderRoute: typeof WorkerConfigsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/target-accounts/': {
      id: '/target-accounts/'
      path: '/target-accounts'
      fullPath: '/target-accounts'
      preLoaderRoute: typeof TargetAccountsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project-types/': {
      id: '/project-types/'
      path: '/project-types'
      fullPath: '/project-types'
      preLoaderRoute: typeof ProjectTypesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/platform-accounts/': {
      id: '/platform-accounts/'
      path: '/platform-accounts'
      fullPath: '/platform-accounts'
      preLoaderRoute: typeof PlatformAccountsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parse-json/': {
      id: '/parse-json/'
      path: '/parse-json'
      fullPath: '/parse-json'
      preLoaderRoute: typeof ParseJsonIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monitoring-tasks/': {
      id: '/monitoring-tasks/'
      path: '/monitoring-tasks'
      fullPath: '/monitoring-tasks'
      preLoaderRoute: typeof MonitoringTasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inspirations/': {
      id: '/inspirations/'
      path: '/inspirations'
      fullPath: '/inspirations'
      preLoaderRoute: typeof InspirationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/douyin-downloader/': {
      id: '/douyin-downloader/'
      path: '/douyin-downloader'
      fullPath: '/douyin-downloader'
      preLoaderRoute: typeof DouyinDownloaderIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets/': {
      id: '/assets/'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/target-accounts/$accountId': {
      id: '/target-accounts/$accountId'
      path: '/target-accounts/$accountId'
      fullPath: '/target-accounts/$accountId'
      preLoaderRoute: typeof TargetAccountsAccountIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TargetAccountsAccountIdRoute: TargetAccountsAccountIdRoute,
  AssetsIndexRoute: AssetsIndexRoute,
  DouyinDownloaderIndexRoute: DouyinDownloaderIndexRoute,
  InspirationsIndexRoute: InspirationsIndexRoute,
  MonitoringTasksIndexRoute: MonitoringTasksIndexRoute,
  ParseJsonIndexRoute: ParseJsonIndexRoute,
  PlatformAccountsIndexRoute: PlatformAccountsIndexRoute,
  ProjectTypesIndexRoute: ProjectTypesIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  TargetAccountsIndexRoute: TargetAccountsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  WorkerConfigsIndexRoute: WorkerConfigsIndexRoute,
  WorkflowRegistryIndexRoute: WorkflowRegistryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
